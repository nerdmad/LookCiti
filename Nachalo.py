import logging
import math
import requests
from dataclasses import dataclass
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(name)

@dataclass
class Attraction:
    id: str
    name: str
    description: str
    lat: float
    lon: float
    category: str

user_states = {}

@dataclass
class UserState:
    current_attractions: list = None
    current_quest: list = None
    current_attraction_index: int = 0
    waiting_for_photo: bool = False

def find_nearby_attractions(user_lat, user_lon, radius=2000):
    try:
        overpass_url = "http://overpass-api.de/api/interpreter"
        
        overpass_query = f"""
        [out:json];
        (
          node["tourism"~"museum|gallery|attraction|zoo|aquarium"](around:{radius},{user_lat},{user_lon});
          node["historic"~"monument|castle|memorial"](around:{radius},{user_lat},{user_lon});
          node["amenity"~"fountain|theatre"](around:{radius},{user_lat},{user_lon});
          way["tourism"~"museum|gallery|attraction|zoo|aquarium"](around:{radius},{user_lat},{user_lon});
          way["historic"~"monument|castle|memorial"](around:{radius},{user_lat},{user_lon});
          way["amenity"~"fountain|theatre"](around:{radius},{user_lat},{user_lon});
        );
        out center 10;
        """
        
        response = requests.post(overpass_url, data=overpass_query)
        data = response.json()
        
        attractions = []
        for element in data['elements']:
            if 'tags' in element and 'name' in element['tags']:
                name = element['tags']['name']
                
                if 'lat' in element and 'lon' in element:
                    lat = element['lat']
                    lon = element['lon']
                elif 'center' in element:
                    lat = element['center']['lat']
                    lon = element['center']['lon']
                else:
                    continue
                
                description = ""
                if 'tourism' in element['tags']:
                    category = element['tags']['tourism']
                    description = f"–ú–µ—Å—Ç–æ –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤: {category}"
                elif 'historic' in element['tags']:
                    category = element['tags']['historic']
                    description = f"–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –º–µ—Å—Ç–æ: {category}"
                elif 'amenity' in element['tags']:
                    category = element['tags']['amenity']
                    description = f"–û–±—ä–µ–∫—Ç: {category}"
                else:
                    category = "attraction"
                    description = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –º–µ—Å—Ç–æ"
                
                attraction_id = f"{element['type']}_{element['id']}"
                
                attractions.append(Attraction(
                    id=attraction_id,
                    name=name,
                    description=description,
                    lat=lat,
                    lon=lon,
                    category=category
                ))
        
        return attractions[:8]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: {e}")
        return []

def calculate_distance(lat1, lon1, lat2, lon2):
    R = 6371
    dlat = math.radians(lat2 - lat1)
    dlon = math.radians(lon2 - lon1)
    a = (math.sin(dlat/2) * math.sin(dlat/2) + 
         math.cos(math.radians(lat1)) * math.cos(math.radians(lat2)) * 
         math.sin(dlon/2) * math.sin(dlon/2))
    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1-a))
    return R * c

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = UserState()
    
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üèõÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢—É—Ä-–∫–≤–µ—Å—Ç!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º —Å –≤–∞–º–∏ –∏ –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ!",
        reply_markup=reply_markup
    )

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    location = update.message.location
    user_lat = location.latitude
    user_lon = location.longitude
    
    await update.message.reply_text("üîç –ò—â—É –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏...")
    
    attractions = find_nearby_attractions(user_lat, user_lon)
    
    if not attractions:
        await update.message.reply_text(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    user_states[user_id].current_attractions = attractions
    
    attractions_text = "üèÜ –ù–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä—è–¥–æ–º —Å –≤–∞–º–∏:\n\n"
    for i, attr in enumerate(attractions, 1):
        distance = calculate_distance(user_lat, user_lon, attr.lat, attr.lon)
        attractions_text += f"{i}. {attr.name}\n"
        attractions_text += f"   üìç {distance:.1f} –∫–º –æ—Ç –≤–∞—Å\n"
        attractions_text += f"   üìñ {attr.description}\n\n"
    
    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –¢—É—Ä-–∫–≤–µ—Å—Ç", callback_data="start_quest")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(attractions_text, reply_markup=reply_markup)

async def start_quest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states[user_id]
    
    if not user_state.current_attractions:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        return
    
    user_state.current_quest = user_state.current_attractions.copy()
    user_state.current_attraction_index = 0
    
    await show_next_attraction(query, context, user_id)

async def show_next_attraction(query, context, user_id):
    user_state = user_states[user_id]
    
    if user_state.current_attraction_index >= len(user_state.current_quest):
        await query.edit_message_text(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –ø—É–Ω–∫—Ç—ã –¢—É—Ä-–∫–≤–µ—Å—Ç–∞!\n\n–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ. –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üèõÔ∏è‚ú®"
        )
        return
    
    current_attr = user_state.current_quest[user_state.current_attraction_index]
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø —Ç—É—Ç!", callback_data="arrived")],
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–æ—á–∫—É", callback_data="skip")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéØ –¢–æ—á–∫–∞ {user_state.current_attraction_index + 1}/{len(user_state.current_quest)}\n\nüèõÔ∏è {current_attr.name}\nüìñ {current_attr.description}\n\n–ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ—Å—å –∫ —ç—Ç–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ö–æ–≥–¥–∞ –¥–æ–±–µ—Ä–µ—Ç–µ—Å—å, –Ω–∞–∂–º–∏—Ç–µ '–Ø —Ç—É—Ç!'",
        reply_markup=reply_markup
    )

async def handle_arrival(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states[user_id]
    
    user_state.waiting_for_photo = True
    
    await query.edit_message_text(
        "üì∏ –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞ –º–µ—Å—Ç–µ!\n\n–¢–µ–ø–µ—Ä—å —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —ç—Ç–æ–π –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ —á–∞—Ç, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ!"
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state = user_states.get(user_id)
    
    if not user_state or not user_state.waiting_for_photo:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∫–≤–µ—Å—Ç –∏–ª–∏ –æ—Ç–º–µ—Ç—å—Ç–µ—Å—å –Ω–∞ –º–µ—Å—Ç–µ!")
        return
    
    user_state.waiting_for_photo = False
    user_state.current_attraction_index += 1
    
    import random
    praise_messages = [
        "üì∏ –û—Ç–ª–∏—á–Ω—ã–π –∫–∞–¥—Ä! –í—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ!",
        "üé® –ü—Ä–µ–∫—Ä–∞—Å–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è! –í–∏–¥–Ω–æ, —á—Ç–æ –≤—ã —É–º–µ–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞–∫—É—Ä—Å!",
        "üåü –í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ! –≠—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–µ—Ä–µ–¥–∞–µ—Ç –≤—Å—é –∫—Ä–∞—Å–æ—Ç—É –º–µ—Å—Ç–∞!",
        "üì∑ –ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å —Å –∑–∞–¥–∞–Ω–∏–µ–º!"
    ]
    praise = random.choice(praise_messages)
    
    if user_state.current_attraction_index < len(user_state.current_quest):
        next_text = f"\n\n{praise}\n\n–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ!"
        
        keyboard = [
            [InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Ç–æ—á–∫–∞", callback_data="next_attraction")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(next_text, reply_markup=reply_markup)
    else:
        await update.message.reply_text(
            f"{praise}\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–µ—Å—å –¢—É—Ä-–∫–≤–µ—Å—Ç! –í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –ù–∞–¥–µ–µ–º—Å—è, –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ! üèõÔ∏è"
        )

async def skip_attraction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user_state = user_states[user_id]
    
    user_state.current_attraction_index += 1
    await show_next_attraction(query, context, user_id)

async def next_attraction(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    await show_next_attraction(query, context, user_id)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        await update.message.reply_text(
            "üèõÔ∏è –¢—É—Ä-–∫–≤–µ—Å—Ç - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥–∏–¥ –ø–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º!\n\n–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n1. üìç –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é\n2. üèÜ –ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º\n3. üöÄ –ù–∞—á–∏–Ω–∞–µ—Ç–µ –∫–≤–µ—Å—Ç –∏ –ø–æ—Å–µ—â–∞–µ—Ç–µ —Ç–æ—á–∫–∏\n4. üì∏ –î–µ–ª–∞–µ—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n5. üéâ –ü–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Ö–≤–∞–ª—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –¥–∞–ª—å—à–µ!\n\n–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!"
        )
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¢—É—Ä-–∫–≤–µ—Å—Ç!",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
                [KeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ")]
            ], resize_keyboard=True)
        )

def main():
    application = Application.builder().token("YOUR_BOT_TOKEN").build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, handle_location))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    application.add_handler(CallbackQueryHandler(start_quest, pattern="^start_quest$"))
    application.add_handler(CallbackQueryHandler(handle_arrival, pattern="^arrived$"))
    application.add_handler(CallbackQueryHandler(skip_attraction, pattern="^skip$"))
    application.add_handler(CallbackQueryHandler(next_attraction, pattern="^next_attraction$"))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == 'main':
    main()